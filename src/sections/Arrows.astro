---
import Carousel from "../components/Carousel.astro";
import ModData from "../components/ModData.astro";
import { ARROWS, getEntityUrl, getItemUrl } from "../consts/arrows";
import { MODS } from "../consts/mods";

const arrows = ARROWS.map(e => ({
    link: getEntityUrl(e),
    name: e.name
}));

---

<div class="flex flex-col items-center  justify-center min-h-[150vh] min-w-full">
    <div class="sticky h-[100vh] top-0 w-full max-w-[calc(100%-2rem)] flex flex-col items-end justify-center gap-[15vh] overflow-visible">
        {arrows.map((e, i) => <img class="w-[125px] -translate-x-[400px]" data-arrow={i} src={e.link} alt={e.name} />)}
    </div>
    <div class="w-full mt-[-50vh] flex bg-white/20 sm:bg-white/40 dark:bg-gray-900/20 dark:sm:bg-gray-900/40 lg:bg-transparent dark:lg:bg-transparent backdrop-blur-sm md:backdrop-blur-none items-center sm:items-center justify-center min-h-screen z-10 gap-6" id="arrows">
        <div class="flex w-[980px] max-w-[calc(100%-4rem)] flex-col sm:flex-row">
            <ModData class="flex-1" mod={MODS.arrows}></ModData>
            <div class="md:flex-1 flex flex-col items-center max-w-full sm:min-h-[80vh] justify-start md:justify-center">
                <div class="flex flex-col items-center w-full gap-5 overflow-hidden">
                    <Carousel id="arrowsCarousel" wrapperClasses="overflow-visible" class="w-64 sm:w-72 sm:mt-10 md:mt-0 md:w-96 aspect-square" elements={ARROWS.map(e => ({name: e.name, url: getEntityUrl(e), pagination_url: getItemUrl(e)}))} imgClasses="-rotate-45 arrow-shadow max-w-[min(380px,100%)] object-contain"></Carousel>
                    <div class="sm:max-w-[min(24rem,40vw)] max-w-96 flex text-center items-center flex-col gap-2 md:min-h-80">
                        <h1 arrow-name class="text-2xl">{ARROWS[0].name}</h1>
                        <div arrow-desc class="flex flex-col gap-2">
                            {!ARROWS[0].description ? undefined : (typeof ARROWS[0].description == "string" ? [ARROWS[0].description] : ARROWS[0].description).map(e => <p class="text-balance">{e}</p>)}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    import gsap from '../function/gsap';
    import { getSwiper } from "../function/swiper";
    import { ARROWS } from "../consts/arrows";
    document.querySelectorAll('[data-arrow]').forEach(e => {
        gsap.to(e, {
            ease: 'none',
            scrollTrigger: {
                trigger: e,
                start: "center 60%",
                end: "center 40%",
                //toggleActions: 'restart pause reverse pause',
                scrub: true, 
                //markers: true
            },
            x: 0, 
            opacity: 1,
            duration: 3
        })
    })
    const reloadArrowsText = (index: number) => {
        const arrow = ARROWS[index];
        document.querySelectorAll('[arrow-name]').forEach(e => (e as HTMLElement).innerText = arrow.name)
        document.querySelectorAll('[arrow-desc]').forEach(e => {
            let arr = arrow.description ? (typeof(arrow.description) === 'string' ? [arrow.description] : arrow.description) : [];
            const children = [...(e as HTMLElement).children];
            children.forEach(e => e.remove());
            arr.forEach(d => {
                const p = document.createElement('p');
                p.classList.add('text-balance');
                p.appendChild(document.createTextNode(d));
                (e as HTMLElement).appendChild(p)
            })

        })
    }

    window.addEventListener('load', () => {
        const swiper = getSwiper(document.getElementById('arrowsCarousel'))
        reloadArrowsText(swiper.activeIndex)
        swiper.on('slideChange', () => reloadArrowsText(swiper.activeIndex))
    })
</script>

<style is:global>
    img.arrow-shadow{
        --drop-shadow-color: #000a;
        filter: drop-shadow(var(--drop-shadow-color) 2px 2px 3px);
    }
</style>

<style>
    img{
        opacity: 0;
        --drop-shadow-color: #000a;
        filter: drop-shadow(var(--drop-shadow-color) 2px 2px 3px);
        image-rendering: pixelated;
        right: 400px;
    }
</style>
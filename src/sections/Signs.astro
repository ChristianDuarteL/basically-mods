---
import Carousel from "../components/Carousel.astro";
import ModData from "../components/ModData.astro";
import { MODS } from "../consts/mods";
import { SIGNS } from "../consts/signs";
---


<div class="flex flex-col items-center relative justify-center min-h-[100vh] md:min-h-[150vh] min-w-full">
    <div class="absolute w-full h-full">
        <div class="absolute bottom-6 w-full flex flex-col items-end justify-center gap-[15vh] overflow-visible">
            <div class="w-[100%] overflow-hidden">
                <div class="signs-spritesheet aspect-[750/18] w-[100%] translate-x-full hidden md:block"></div>
            </div>
        </div>
    </div>
    <div class="-z-10 absolute w-full h-full before:w-full before:h-full before:absolute before:bg-white/25 dark:before:bg-black/25 transition-colors opacity-0" signs-panel-bg></div>
    <div class="w-full flex sm:items-center justify-center min-h-screen z-10 gap-6" id="signs">
        <div class="flex w-[980px] max-w-[calc(100%-4rem)] flex-col sm:flex-row">
            <ModData mod={MODS.signs} class="flex-1"></ModData>
            <div class="flex-1 flex flex-col items-center max-w-full sm:min-h-[80vh] justify-start md:justify-center">
                <div class="flex flex-col items-center w-full gap-5 overflow-hidden">
                    <Carousel id="signsCarousel" slideClasses="signSlide" wrapperClasses="overflow-visible" class="w-64 sm:w-72 sm:mt-10 md:mt-0 md:w-96 aspect-square" elements={SIGNS.map(e => ({name: e.name, url: e.entity, pagination_url: e.item}))} imgClasses="arrow-shadow max-w-[min(380px,100%)]"></Carousel>
                    <div class="sm:max-w-[min(24rem,40vw)] max-w-96 flex text-center items-center flex-col gap-2 md:min-h-32">
                        <h1 sign-name class="text-2xl opacity-75">{SIGNS[0].name}</h1>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    import gsap from '../function/gsap';
    import { SIGNS } from "../consts/signs";
    import getDominantColor from "../function/getDominantColor";
    import { getSwiper } from "../function/swiper";

    document.querySelectorAll('.signs-spritesheet').forEach(e => {
        gsap.to(e, {
            ease: 'none',
            scrollTrigger: {
                trigger: e,
                //pin: true,
                start: "center 100%",
                end: "center -20%",

                //toggleActions: 'restart pause reverse pause',
                scrub: true
            },
            top: 100,
            x: '-100%',
            duration: 3
        })
    })

    document.querySelectorAll('[signs-panel-bg]').forEach(e => {
        gsap.to(e, {
            ease: 'none',
            scrollTrigger: {
                trigger: e,
                //pin: true,
                start: "top 100%",
                end: "top 0%",

                //toggleActions: 'restart pause reverse pause',
                scrub: true
            },
            opacity: 1,
        })
    })

    const images: HTMLImageElement[] = [...document.getElementById("signsCarousel").querySelectorAll("[carousel-slide] img")] as HTMLImageElement[];
    images.forEach(e => {
        const load = () => {
            e.dataset.mainColor = getDominantColor(e, 100, [[0,0,1,.5]])[0];
            e.dispatchEvent(new Event('dominantcolorloaded'));
        }
        e.complete ? load() : e.addEventListener('load', load);
    })
    
    const reloadSignsBackground = (i: number) => {
        const m = images[i];
        if(m.dataset.mainColor){
            const elem = document.querySelector('[signs-panel-bg]') as HTMLElement;
            elem.style.background = m.dataset.mainColor;
        }else{
            m.addEventListener('dominantcolorloaded', () => reloadSignsBackground(i))
        }
        document.querySelectorAll('[sign-name]').forEach(e => e instanceof HTMLElement && (e.innerText = SIGNS[i].name))
    }

    window.addEventListener('load', () => {
        const swiper = getSwiper(document.getElementById('signsCarousel'))
        swiper.on('slideChange', () => reloadSignsBackground(swiper.activeIndex))
    })
    reloadSignsBackground(0);
</script>

<style>
    .signs-spritesheet{
        background-image: url('/img/signs/items_spritesheet_inline.png');
        background-size: cover;
        image-rendering: pixelated;
    }
</style>